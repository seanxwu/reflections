What happens when you initialize a repository? Why do you need to do it?

: git init  # from the directory you want to become a depository, 0 commit
: git status  # or :git log
------------------------------------------------------------------------------------
sxwu reflections $ git init
Initialized empty Git repository in C:/Users/sxwu/version-control/reflections/.git/
sxwu (master #) reflections $ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        lesson_1_reflections.txt
        lesson_2_reflections.txt

nothing added to commit but untracked files present (use "git add" to track)
-------------------------------------------------------------------------------------

: git add file_to_add # move file to staging area, before commit 

: git reset lesson_2_reflections.txt # undo git add (by removing file from staging area)

How is the staging area different from the working directory and the repository? 
staging area is inside working directory, but a virtual notion for git. 
Files get added to staging area by "git add" command.
working directory contains the files in staging area (tracked, but not committed), 
untracked files, and later tracked (=committed) files.
------------
:git status # performed on a just cloned repository will get following info
sxwu ((3884eab...)) asteroids $ git status
HEAD detached at 3884eab
nothing to commit, working directory clean
------------
What value do you think it offers?


$$$$$$$$$$$$$$$$

git commit # will ask about -w whether to create or not, answer NO! 
it will auto open COMMIT_EDITMSG file
Once completed COMMIT_EDITMSG following style guide, save. 
Close Notepad editor, the commit will complete.
If commit message is empty, the commit will abort automatically.



: git diff                  #will compare automatically the working directory and staging area
: git diff --staged         #will compare automatically the staging area and latest commit(1) - or master
: git diff commit1 commit2  #will compare older (uppder) commit1 with newer (lower) commit2
: git checkout master       #will get you back the latest commit

How can you use the staging area to make sure you have one commit per logical change?

: git branch                #will show you current branch, with the * on the checked out branch
: git branch br_name        #will create branch with br_name
: git checkout br_name      #will checkout br_name - use git branch, it will show you who got *
: git checkout -b br_name   #this equals above 2 commands in seq.


What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

: git checkout coins        #this will switch from current branch to a remote branch called coins
: git log --graph --oneline master coins    #you will need to check out the coins branch using above command before this command

How do the diagrams help you visualize the branch structure?

:git gc     #garbage collection - may delete the unreachable 
:git merge master coins
:git show commitId      #shows the diff btw this commitId with its parent (not necessarily the next in git log since they are time based including all branches)
:git branch -d coins    #once merge is confirmed, you can remove the label of the branch coins

-------------------
:git checkout branch1 
:git merge branch2
:git merge branch1 branch2  # assume you have not checked out anything, this equals above 2 cmds
--------------------
:git merge --abort
--------------------
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
























##########################################################################################
Commit Messages


Message Structure

A commit messages consists of three distinct parts separated by a blank line: the title, an optional body and an optional footer. The layout looks like this:
type: subject

body

footer

The title consists of the type of the message and subject.


The Type

The type is contained within the title and can be one of these types:
•feat: a new feature
•fix: a bug fix
•docs: changes to documentation
•style: formatting, missing semi colons, etc; no code change
•refactor: refactoring production code
•test: adding tests, refactoring test; no production code change
•chore: updating build tasks, package manager configs, etc; no production code change


The Subject

Subjects should be no greater than 50 characters, should begin with a capital letter and do not end with a period.

Use an imperative tone to describe what a commit does, rather than what it did. For example, use change; not changed or changes.


The Body

Not all commits are complex enough to warrant a body, therefore it is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how.

When writing a body, the blank line between the title and the body is required and you should limit the length of each line to no more than 72 characters.


The Footer

The footer is optional and is used to reference issue tracker IDs.


Example Commit Message
feat: Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789
